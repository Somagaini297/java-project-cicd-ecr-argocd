AWS EKS CI/CD: Cluster Set-up, App containerization & Deployment, CodePipeline| DevOps With AWS
-----------------------------------------------------------------
devopslearning.medium.com/ci-cd-pipeline-for-eks-using-codecommit-codebuild-codepipeline-and-elastic-container-100f4b85e434 --> for AWS Codepipeline reference
https://medium.com/@gurpreet.singh_89/simplifying-kubernetes-operations-with-terraform-argocd-and-gitops-on-aws-part-4-f7dcbbd42389 --->Codepipeline CICD--Argocd
1) Introduction to AWS EKS
2) Setup EKS Cluster using eksctl
3) Deploy Java app using kubectl
4) Setting Up CI/CD with AWS Codepipeline + AWS CodeCommit + AWS CodeBuild
   Note: Here we have to disable the webhook push trigger for automatic build due to this two time build job is running
   One through Webhook and ohter through codepiepline
5) configuring AWS EKS Cluster for CI/CD
IAM Permissions for AWS User
1) AdministratorAccess 2) AmazonEC2ContainerRegistryFullAccess 3) AmazonEC2FullAccess 4) AmazonEKSClusterPolicy
---------------------------------------------------------------------------------------------
Steps to be followed
Step1) Create ECR Repository and with push commands update buildspec file and deployment file
Step2) Create an EC2 Instance with t2.medium and create EKS CLuster
- Install awscli-v2, kubectl, eksctl and iam-authenticator
- cofigure iam user with admin credentials to communicate with aws resources (Need to add ekscluster policy
- Configure iam identity for Codebuild role
- Install git to download source code repo
- creare eks cluster and do deploy and service files
step3) Come to code build--> create code build project and need to update env varibales also
step4) Create code pipeline 
5) Configure IAM user
aws configure

AWS Access Key ID [None]: 
AWS Secret Access Key [None]: 
Default region name [None]: us-east-1
Default output format [None]: json
--------------------------------------------------------------------------------------Prerequisites------------------------------------------------------------
1) awscli version2
sudo yum remove awscli -y --> to remove previuos installed awscli
https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html --> link
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
./aws/install
mv /usr/local/bin/aws /usr/bin/
aws --version
(mv /usr/local/bin/aws /usr/bin/ if aws --version not works, we need to do)
2) kubectl installation
https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html --> link
curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.9/2023-10-17/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv kubectl /usr/local/bin
kubectl version

3) eksctl installation
https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up-eksctl.html --> link
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version
4) Iam Authenticator installation
https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html --> link
curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.6.11/aws-iam-authenticator_0.6.11_linux_amd64
chmod +x ./aws-iam-authenticator
mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH
echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
aws-iam-authenticator help
To get details about the current IAM identity

The following get-caller-identity command displays information about the IAM identity used to authenticate the request. The caller is an IAM user.

aws sts get-caller-identity
Output:

{
    "UserId": "AIDASAMPLEUSERID",
    "Account": "123456789012",
    "Arn": "arn:aws:iam::123456789012:user/DevAdmin"
}

yum install git -y --->to download git repo
--------------------------------------------------EKS cluster creation on EC2 Instance------------------------------------------------------------
Configure IAM User with Admin previliges and install docker

Create eks cluster

eksctl create cluster -f cluster.yml

Install docker and make sure its running and give ecr login command
amazon-linux-extras install docker -y --> to install docker

systemctl start docker--> To start docker

systemctl status docker --> To check its running or not

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 649787745281.dkr.ecr.us-east-1.amazonaws.com --> To login to ECR

eksctl create iamidentitymapping --cluster cicd-demo --arn arn:aws:iam::649787745281:role/CodeBuildKubectlRole --group system:masters --username CodeBuildKubectlRole

Create Dockerfile to build an image and push to ECR

1)Retrieve an authentication token and authenticate your Docker client to your registry.
Use the AWS CLI:
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 649787745281.dkr.ecr.us-east-1.amazonaws.com
Note: If you receive an error using the AWS CLI, make sure that you have the latest version of the AWS CLI and Docker installed.

2) Build your Docker image using the following command. For information on building a Docker file from scratch see the instructions here 
. You can skip this step if your image is already built:
docker build -t cicd-demo .

3)After the build completes, tag your image so you can push the image to this repository:
docker tag cicd-demo:latest 649787745281.dkr.ecr.us-east-1.amazonaws.com/cicd-demo:latest

4) Run the following command to push this image to your newly created AWS repository:
docker push 649787745281.dkr.ecr.us-east-1.amazonaws.com/cicd-demo:latest

Note: We need to copy the image uri to deployment file

Run deployment and service files in eks cluster

and kubectl rollout restart -f eks_cicd/deployment.yaml --> run this command to fetch newly updated image

This is manually updating CICD
----------------------------------------------------------------------------------------------------------------
Now automate the CICD using AWS Codepipeline

Create Pieplineand updathe the stages

In build stage update the following in environment variables section

AWS_DEFAULT_REGION

AWS_CLUSTER_NAME

AWS_ACCOUNT_ID

IMAGE_REPO_NAME

IMAGE_TAG

--> Create IAM Role for codebuild-->
Role Name: CodeBuildKubectlRole
Policies

AWSCodeCommitFullAccess
AmazonEC2ContainerRegistryFullAccess
AmazonS3FullAccess
CloudWatchLogsFullAccess
AWSCodeBuildAdminAccess
eks-describe
-----> Role should be updated in codebuild section
------> The above role created to access eks cluster
IF we dont't use eksctl
kubectl get configmaps aws-auth -n kube-system -o yaml > aws-auth.yaml
do kubectl apply -f aws-auth.yaml
--------------------------------------------------------------------------
Errors
Build image error

The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested

eksctl create iamidentitymapping --cluster cicd-demo --arn arn:aws:iam::649787745281:role/CodeBuildKubectlRole --group system:masters --username CodeBuildKubectlRole

[root@ip-172-31-55-243 eks_cicd]# eksctl create iamidentitymapping --cluster cicd-demo --arn arn:aws:iam::649787745281:role/CodeBuildKubectlRole --group system:masters --username CodeBuildKubectlRole
2023-10-26 14:15:25 [ℹ]  checking arn arn:aws:iam::649787745281:role/CodeBuildKubectlRole against entries in the auth ConfigMap
2023-10-26 14:15:25 [ℹ]  adding identity "arn:aws:iam::649787745281:role/CodeBuildKubectlRole" to auth ConfigMap

Need to give ecr authentication
[root@ip-172-31-55-243 ~]# docker pull 649787745281.dkr.ecr.us-east-1.amazonaws.com/cicd-demo:build-66e44b9d-b462-4b3f-86fe-b4ee57ec6f1b
Error response from daemon: pull access denied for 649787745281.dkr.ecr.us-east-1.amazonaws.com/cicd-demo, repository does not exist or may require 'docker login': denied: Your authorization token has expired. Reauthenticate and try again.
[root@ip-172-31-55-243 ~]# 

